---
title: "Water Resources"
format:
  html:
    theme: flatly
    toc: true
    toc-location: right
    number-sections: true
    toc-depth: 3
    code-fold: false
    code-tools: false
    fig-cap: true
    callout-icon: false
---


```{r quarto setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE, echo=FALSE, cache=TRUE)
#| warning: false
#| echo: false
```

```{css}
.dataTables_wrapper {
  max-height: 350px;
  overflow-y: auto;
}

.dataTables_wrapper table {
font-size: 11px;
}
```

```{r }
#| label: the general cps & cat

library(sf)
library(magrittr)
library(tidyverse)
library(leaflet)
library(lubridate)

source("Catch_Set_Up.R")

```

```{r}


# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))

# 2022 map
CDE_e_2022 <- CDE %>% 
  filter(Classification.Item == "Hydrological Regime" & 
           Year == "2022")


```

The Environment Agency is responsible for managing water resources in England. We need to make sure there is enough water for people (public water supply, industry and agriculture) and a healthy environment. 

## Hydrological Regime WFD

Within the `r unique(CAT$OPCAT_NAME)`'s `r length(unique(CAT$WB_NAME))` individual EA waterbodies. In the most recent WFD classification in `r sort(unique(CDE$Year), decreasing=TRUE)[1]`, `r round(sum(CDE_e_2022$Status == "Supports Good")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored " Supports Good" for `r unique(CDE_e_2022$Classification.Item)`. Whilst `r round(sum(CDE_e_2022$Status == "High")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "High".

```{r WFD Map hydrolregime}


CDE_m <- CDE %>% 
  filter(Classification.Item == "Hydrological Regime")

CDE_m_22 <- CDE_m %>% 
         filter(Year == sort(unique(CDE$Year), decreasing=TRUE)[1])

CDE_m_19 <- CDE_m %>% 
         filter(Year == sort(unique(CDE$Year), decreasing=TRUE)[2])

CDE_m_15 <- CDE_m %>% 
         filter(Year == sort(unique(CDE$Year), decreasing=TRUE)[3])

CDE_m_last3 <- CDE_m %>% 
          filter(Year == sort(unique(CDE$Year), decreasing=TRUE)[1] &
                          sort(unique(CDE$Year), decreasing=TRUE)[2] &
                          sort(unique(CDE$Year), decreasing=TRUE)[3]
                 )

 leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
   addPolygons(data= CDE_m_22,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group= "2022 Status") %>% 
  addPolygons(data= CDE_m_19,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group= "2019 Status") %>% 
  addPolygons(data= CDE_m_15,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group = "2015 Status") %>% 
  addLegend(opacity = 0.9, 
            pal = pal,
            values = CDE_m$Status,
            title = unique(CDE_m_last3$Classification.Item)) %>% 
  addLayersControl(baseGroups = c( "2022 Status",
              "2019 Status",
              "2015 Status"),
                   overlayGroups = c(
             "Esri Basemap"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019 Status",
              "2015 Status",
              "Esri Basemap"))


```

### Reasons for Not Achieving Good

The table below highlights RNAGs failing their Hydrological Regime classification. It also includes RNAGs failing for a non-hydrological element, but where hydrology is identified as the primary or secondary pressure causing the failure.

::: {.callout-tip icon="true"}
Use the below 'Search' box to to search for a waterbody or classification element and scroll through RNAGs and Measures. Click the 'Excel' button to download a spreadsheet.
:::

::: column-body-outset
```{r RNAGS datatable WQ}

RNAG <- RFF %>%  filter(
                       CLASS_ITEM_NAME == "Hydrological Regime" |
                       PRESSURE_1 == "Hydrology" | 
                       PRESSURE_2 == "Hydrology" ) %>% 
                       arrange(WATERBODY_ID)  %>% 
                       rename(YEAR_RNAG_CREATED= CREATED_DATE,
                       WFD_YEAR = YEAR) %>% 
                       distinct()

# Arrange dataframe so it appears neater in DT

library(DT)
library(htmlwidgets)

DT::datatable(RNAG[,c(7, 6,18, 32, 16:17,19,20,22:30,23, 10,11,2)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )
             

```
:::

### Measures

Measures for the waterbodies identified above are shown in the table below.

::: column-body-outset
```{r Measures WQ}
Mes %<>%  filter(WATERBODY_ID %in% unique(RNAG$WATERBODY_ID))

CAT_Mini <- CAT %>% select(WB_NAME, WB_ID) %>% 
  st_drop_geometry()

Mes_Categ <- inner_join(Mes, Measures_Cat, by = "ACTION_UID") %>% 
             inner_join(CAT_Mini, by = c("WATERBODY_ID" = "WB_ID")) %>% 
              filter(!CREATED_DATE== "01/01/1980" & DEPRECATED_CATEGORY == "No") %>% 
              distinct() %>% 
              arrange(WATERBODY_ID)


# Datatable
   DT::datatable(Mes_Categ[,c(16,3,10,12:14)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )
```
:::

## Abstraction Licensing Strategies

The Environment Agency use the catchment abstraction management strategy (CAMS) process and abstraction licensing strategies to regulate existing abstraction licences (how much water is taken from the environment) and grant new permits.

An Environmental Flow Indicator (EFI) is used to indicate where abstraction pressures may start to cause undesirable effects on river habitats and ecology. Non-compliance with the EFI is divided into 3 categories depending on how far below the EFI recent actual flows are. The below map shows different flow scenarios and their related compliance relative to EFI. Q95 are low flows, exceeded 95% of the time, whilst Q30 flows are exceeded 30% of the time. Mean flow in most surface waters is nearer to Q30 than Q50.


```{r ALS Maps}

#MetBrewer::met.brewer(name = "Isfahan2")

library(leaflet)
library(magrittr)
library(tidyverse)

ALS <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/Copy_of_Parrett_WRGIS_info.xlsx", skip =3) %>% 
                  rename_with(make.names)

ALS$FL.Flow.Compliance.Q95 <- gsub("BAND 1", "BAND1", ALS$FL.Flow.Compliance.Q95)

ALS %<>% 
  inner_join(CAT, ., by = c("WB_ID" ="EA_WB_ID")) %>% 
           sf::st_transform(4326) %>% 
            select(10:35)



# Define palette
pal_ALS <- colorFactor(
  palette = c("#79ad41", "#ddc000", "#cf3a36"),
  levels = c("COMPLIANT", "BAND1", "BAND3"),
  na.color = "transparent"
)


 leaflet(ALS) %>% 
  addProviderTiles(providers$Esri) %>% 
   
   addPolygons(
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal_ALS(FL.Flow.Compliance.Q95),
              popup= ~paste0("Waterbody: ", WB_NAME,
                             "<br> WB_ID: ", ALS$WB_ID,
                             "<br> Surplus/Deficit: ", round(((ALS$FL_Q95.Surplus...Deficit.as...of.QN)*100),0),"%"),
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group= "Q95 Flow Compliance") %>% 
   
  addPolygons(
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal_ALS(FL.Flow.Compliance.Q70),
               popup= ~paste0("Waterbody: ", WB_NAME,
                             "<br> WB_ID: ", ALS$WB_ID,
                             "<br> Surplus/Deficit: ", round(((ALS$FL_Q70.Surplus...Deficit.as...of.QN)*100),0),"%"),
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group= "Q70 Flow Compliance") %>% 
   
  addPolygons(
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal_ALS(FL.Flow.Compliance.Q50),
               popup= ~paste0("Waterbody: ", WB_NAME,
                             "<br> WB_ID: ", ALS$WB_ID,
                             "<br> Surplus/Deficit: ", round(((ALS$FL_Q50.Surplus...Deficit.as...of.QN)*100),0),"%"),
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group = "Q50 Flow Compliance") %>% 
   
  addPolygons(
              color = "black",
              weight = 0.5,
              fillOpacity = 0.9,
              fillColor = ~pal_ALS(FL.Flow.Compliance.Q30),
               popup= ~paste0("Waterbody: ", WB_NAME,
                             "<br> WB_ID: ", ALS$WB_ID,
                             "<br> Surplus/Deficit: ", round(((ALS$FL_Q30.Surplus...Deficit.as...of.QN)*100),0),"%"),
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group = "Q30 Flow Compliance") %>% 
   
  addLegend(opacity = 0.9, 
            pal = pal_ALS,
            values = ALS$FL.Flow.Compliance.Q95,
            title = "Water Availability") %>%
   
  addLayersControl(baseGroups = c( "Q95 Flow Compliance",
                                   "Q70 Flow Compliance",
                                   "Q50 Flow Compliance",
                                   "Q30 Flow Compliance"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) 

```
